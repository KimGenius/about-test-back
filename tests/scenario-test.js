const {expect} = require('chai')
const request = require('supertest')
const app = require('../app')
const db = require("../db")

describe('Scenario test', () => {
  before(async () => {
    await db.execute("DELETE FROM bab")
  })
  const newMember = '김영재'
  const targetMember = '타겟1,타겟2,타겟3'
  it('첫 성공 테스트', async () => {
    const res = await request(app)
      .post('/bab')
      .set('Accept', 'application/json')
      .type('application/json')
      .send({newMember, targetMember})
    expect(res.status).to.equal(201)
  })
  it('데이터 한개 들어갔는지 테스트', async () => {
    const res = await request(app)
      .get('/bab')
      .set('Accept', 'application/json')
      .type('application/json')
    expect(res.status).to.equal(200)
    expect(res.body).to.have.lengthOf(1)
    const resultMember = res.body[0].resultMember.split(',')
    expect(resultMember).to.have.lengthOf(2)
    expect(resultMember[0]).to.not.equal(resultMember[1])
  })
  it('가능한 경우가 2명 미만인 경우 실패 테스트', async () => {
    const res = await request(app)
      .post('/bab')
      .set('Accept', 'application/json')
      .type('application/json')
      .send({newMember, targetMember})
    expect(res.status).to.equal(409)
    expect(res.body.message).to.equal('밥을 같이 먹지 않은 팀원이 2명 미만입니다.')
  })
  it('newMember 입력 안했을 시 Validation 테스트', async () => {
    const res = await request(app)
      .post('/bab')
      .set('Accept', 'application/json')
      .type('application/json')
      .send({targetMember})
    expect(res.status).to.equal(400)
    expect(res.body.message).to.equal('신규 입사자를 입력해주세요')
  })
  it('targetMember 입력 안했을 시 Validation 테스트', async () => {
    const res = await request(app)
      .post('/bab')
      .set('Accept', 'application/json')
      .type('application/json')
      .send({newMember})
    expect(res.status).to.equal(400)
    expect(res.body.message).to.equal('기존 팀원을 입력해주세요')
  })
  it('다시 가능한 경우로 했을 때 성공 테스트', async () => {
    const res = await request(app)
      .post('/bab')
      .set('Accept', 'application/json')
      .type('application/json')
      .send({newMember, targetMember: targetMember.concat(["타켓4"])})
    expect(res.status).to.equal(201)
  })
  it('데이터 2개 들어갔는지 테스트', async () => {
    const res = await request(app)
      .get('/bab')
      .set('Accept', 'application/json')
      .type('application/json')
    expect(res.status).to.equal(200)
    expect(res.body).to.have.lengthOf(2)
    const resultMember = res.body[0].resultMember.split(',')
    expect(resultMember).to.have.lengthOf(2)
    expect(resultMember[0]).to.not.equal(resultMember[1])
  })
})
